import asyncio
from collections.abc import AsyncGenerator
from typing import Generator

import pytest
from fastapi.testclient import TestClient

from {{ project_slug }}.api.application import app
{% if database %}
{% if database_type == 'sqlalchemy' %}
from sqlalchemy.ext.asyncio import AsyncSession

from {{ project_slug }}.connection import database
{% elif database_type == 'mongodb' %}
from {{ project_slug }}.connection import mongodb
{% endif %}
{% endif %}


@pytest.fixture(scope="session")
def event_loop():
	"""Create an instance of the default event loop for the test session."""
	loop = asyncio.get_event_loop_policy().new_event_loop()
	yield loop
	loop.close()


@pytest.fixture(scope="session")
def client() -> Generator[TestClient, None, None]:
	"""Create a test client for testing the FastAPI app."""
	with TestClient(app) as client:
		yield client


{% if database %}
{% if database_type == 'sqlalchemy' %}
@pytest.fixture(scope="function")
async def db_session() -> AsyncGenerator[AsyncSession, None]:
	"""Create a database session for testing."""
	async for session in database.get_db():
		try:
			# Clear any existing data
			# You can add table cleanup here if needed
			yield session
			await session.rollback()  # Rollback changes after test
		except Exception:
			await session.rollback()
			raise
{% elif database_type == 'mongodb' %}
@pytest.fixture(scope="function")
async def mongodb_client():
	"""Create a MongoDB client for testing."""
	await mongodb.connect()
	try:
		yield mongodb
	finally:
		await mongodb.close()
{% endif %}
{% endif %}
