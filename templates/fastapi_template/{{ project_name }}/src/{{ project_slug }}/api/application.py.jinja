from fastapi import FastAPI
from fastapi.openapi.models import Server
from fastapi.responses import HTMLResponse, ORJSONResponse
from scalar_fastapi import get_scalar_api_reference
from starlette.middleware.cors import CORSMiddleware

from {{ project_slug }}.api.lifespan import lifespan
from {{ project_slug }}.core.config import settings
from {{ project_slug }}.core.middlewares.logger import LoggingMiddleware
from {{ project_slug }}.core.utils import logger
from {{ project_slug }}.features import api
from {{ project_slug }}.schema.response import APIResponse, ResponseUtils


def create_app() -> FastAPI:
	"""
	Create a FastAPI application instance with the '/api' base path.

	This function can be used both for the main application and for testing.

	Returns:
		FastAPI: The configured application instance.

	"""
	_app = FastAPI(
		debug=settings.app.DEBUG,
		lifespan=lifespan,
		title=settings.app.TITLE,
		description=settings.app.DESCRIPTION,
		summary=settings.app.SUMMARY,
		default_response_class=ORJSONResponse,
		openapi_url="/api/openapi.json",
		servers=[
			Server(
				url="http://0.0.0.0:8000",
				description="Local server",
			).model_dump(),
			Server(
				url="https://api.{{ project_slug }}.com",
				description="{{ project_name }} server",
			).model_dump(),
		],
	)

	_app.add_middleware(
		CORSMiddleware,
		allow_origins=["*"],
		allow_credentials=True,
		allow_methods=["*"],
		allow_headers=["*"],
	)
	_app.add_middleware(LoggingMiddleware)

	_app.include_router(router=api)

	return _app


# Create the application instance
app: FastAPI = create_app()


@app.get(
	"/",
	name="health",
	tags=["Health"],
	description="Check the health of the application.",
)
async def health() -> APIResponse:
	"""
	Check the health of the application.
	:return: A JSON response with the status, version, and environment.
	"""
	return ResponseUtils.create_success_response(
		message=f"{settings.app.TITLE} API is healthy",
		data={"version": settings.app.VERSION},
	)


@app.get("/scalar", include_in_schema=False)
async def scalar_html() -> HTMLResponse:
	return get_scalar_api_reference(
		title=settings.app.TITLE,
		dark_mode=True,
		openapi_url=app.openapi_url,  # type: ignore
		scalar_proxy_url="https://proxy.scalar.com",
	)


if settings.app.DEBUG:
	logger.info(
		f"Checkout the docs at: http://{settings.server.HOST}:{settings.server.PORT}/scalar",
	)
else:
	logger.info(
		f"Checkout the docs at: https://{settings.server.HOST}:{settings.server.PORT}/scalar",
	)
