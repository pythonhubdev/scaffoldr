name: Release

on:
    push:
        branches:
            - main

jobs:
    build:
        runs-on: ubuntu-latest
        permissions:
            contents: write
            pull-requests: write
            actions: write
            checks: write
            statuses: write
        env:
            dist_artifacts_name: dist
            dist_artifacts_dir: dist
            lock_file_artifact: uv.lock
        steps:
            -   uses: actions/create-github-app-token@v2
                id: app-token
                with:
                    app-id: ${{ secrets.APP_ID }}
                    private-key: ${{ secrets.APP_PRIVATE_KEY }}
                    owner: ${{ github.repository_owner }}
                    repositories: scaffoldr
            -   name: Check out repository
                uses: actions/checkout@v5
                with:
                    ref: ${{ github.ref }}
                    token: ${{ steps.app-token.outputs.token }}
                    fetch-depth: 0

            -   name: Configure Git user
                run: |
                    git config user.name "github-actions[bot]"
                    git config user.email "github-actions[bot]@users.noreply.github.com"

            -   name: Install uv
                uses: astral-sh/setup-uv@v5
                with:
                    pyproject-file: "pyproject.toml"
                    python-version: "3.13"
                    enable-cache: true
                    cache-dependency-glob: "**/pyproject.toml"

            -   name: Install dependencies
                run: uv sync --all-extras --group dev

            -   name: Detect next version
                id: version
                env:
                    GH_TOKEN: "none"  # Prevents accidental push
                run: |
                    # Run semantic-release in dry-run mode to check if a release should be made
                    set +e  # Don't exit on error
                    OUTPUT=$(uv run semantic-release --dry-run version 2>&1)
                    EXIT_CODE=$?
                    set -e  # Re-enable exit on error

                    echo "Semantic release dry-run output:"
                    echo "$OUTPUT"
                    echo "Exit code: $EXIT_CODE"

                    # Debug information
                    echo "Repository: ${{ github.repository }}"
                    echo "Branch: ${{ github.ref_name }}"
                    echo "Commit: ${{ github.sha }}"

                    # Check if semantic-release would make a release (exit code 0 means release would be made)
                    if [ $EXIT_CODE -eq 0 ]; then
                        # Try to extract the version that would be released
                        VERSION=$(echo "$OUTPUT" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1 || echo "")

                        if [ -n "$VERSION" ]; then
                            echo "New release would be created: $VERSION"
                            echo "released=true" >> $GITHUB_OUTPUT
                            echo "version=$VERSION" >> $GITHUB_OUTPUT
                            echo "tag=v$VERSION" >> $GITHUB_OUTPUT
                            echo "is_prerelease=false" >> $GITHUB_OUTPUT
                        else
                            # If we can't extract version but exit code is 0, still proceed
                            echo "Release would be created but version unclear, proceeding anyway"
                            echo "released=true" >> $GITHUB_OUTPUT
                            echo "version=unknown" >> $GITHUB_OUTPUT
                            echo "tag=unknown" >> $GITHUB_OUTPUT
                            echo "is_prerelease=false" >> $GITHUB_OUTPUT
                        fi
                    else
                        echo "No release would be made (exit code: $EXIT_CODE)"
                        echo "released=false" >> $GITHUB_OUTPUT
                        echo "version=" >> $GITHUB_OUTPUT
                        echo "tag=" >> $GITHUB_OUTPUT
                        echo "is_prerelease=false" >> $GITHUB_OUTPUT
                    fi

            -   name: Upload lock file artifact (if needed for release)
                if: ${{ steps.version.outputs.released == 'true' }}
                uses: actions/upload-artifact@v4
                with:
                    name: ${{ env.lock_file_artifact }}
                    path: ${{ env.lock_file_artifact }}
                    if-no-files-found: error
                    retention-days: 2

        outputs:
            new-release-detected: ${{ steps.version.outputs.released }}
            new-release-version: ${{ steps.version.outputs.version }}
            new-release-tag: ${{ steps.version.outputs.tag }}
            new-release-is-prerelease: ${{ steps.version.outputs.is_prerelease }}
            lock-file-artifact: ${{ env.lock_file_artifact }}

    release:
        runs-on: ubuntu-latest
        needs:
            - build
        if: ${{ needs.build.outputs.new-release-detected == 'true' }}
        concurrency:
            group: ${{ github.workflow }}-release-${{ github.ref_name }}
            cancel-in-progress: false
        permissions:
            contents: write

        steps:
            -   uses: actions/create-github-app-token@v2
                id: app-token
                with:
                    app-id: ${{ secrets.APP_ID }}
                    private-key: ${{ secrets.APP_PRIVATE_KEY }}
                    owner: ${{ github.repository_owner }}
                    repositories: scaffoldr

            -   name: Check out repository
                uses: actions/checkout@v5
                with:
                    ref: ${{ github.ref }}
                    token: ${{ steps.app-token.outputs.token }}
                    fetch-depth: 0

            -   name: Configure Git user
                run: |
                    git config user.name "github-actions[bot]"
                    git config user.email "github-actions[bot]@users.noreply.github.com"

            -   name: Install uv
                uses: astral-sh/setup-uv@v5
                with:
                    pyproject-file: "pyproject.toml"
                    python-version: "3.13"
                    enable-cache: true
                    cache-dependency-glob: "**/pyproject.toml"

            -   name: Install dependencies
                run: uv sync --all-extras --group dev

            -   name: Create release
                env:
                    GH_TOKEN: ${{ steps.app-token.outputs.token }}
                run: |
                    echo "Creating release with the following information:"
                    echo "Expected version: ${{ needs.build.outputs.new-release-version }}"
                    echo "Expected tag: ${{ needs.build.outputs.new-release-tag }}"
                    echo "Is prerelease: ${{ needs.build.outputs.new-release-is-prerelease }}"
                    echo "Repository: ${{ github.repository }}"
                    echo ""

                    # Run the full semantic-release process: version bump, changelog, tag, and GitHub release
                    echo "Running semantic-release..."
                    uv run semantic-release -vv
